// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SmobaData.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "SmobaData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - WJSmobaDataRoot

@implementation WJSmobaDataRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - WJSmobaDataRoot_FileDescriptor

static GPBFileDescriptor *WJSmobaDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                 objcPrefix:@"WJ"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum WJCMD

GPBEnumDescriptor *WJCMD_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CmdUnknow\000CmdAppSvrGetGameStatusReq\000CmdA"
        "ppSvrGetGameStatusResp\000CmdAppSvrAccountA"
        "pplyReq\000CmdAppSvrAccountApplyResp\000CmdApp"
        "SvrReportLoginResultReq\000CmdAppSvrReportL"
        "oginResultResp\000CmdAppSvrGetBattleResultR"
        "eq\000CmdAppSvrGetBattleResultResp\000CmdSmoba"
        "SvrLoginReq\000CmdSmobaSvrLoginResp\000CmdSmob"
        "aSvrProgressReportReq\000CmdSmobaSvrCreateR"
        "oomReq\000CmdSmobaSvrCreateRoomResp\000CmdSmob"
        "aSvrJoinRoomReq\000CmdSmobaSvrJoinRoomResp\000"
        "CmdSmobaSvrBattleStartReq\000CmdSmobaSvrBat"
        "tleStartResp\000CmdSmobaSvrBattleFinishReq\000"
        "CmdSmobaSvrBattleFinishResp\000CmdAppSmobaA"
        "ccountInfoReq\000CmdAppSmobaAccountInfoResp"
        "\000CmdAppSmobaJoinRoomReq\000CmdAppSmobaJoinR"
        "oomResp\000CmdAppGmReleaseAccountReq\000CmdApp"
        "GmReleaseAccountResp\000";
    static const int32_t values[] = {
        WJCMD_CmdUnknow,
        WJCMD_CmdAppSvrGetGameStatusReq,
        WJCMD_CmdAppSvrGetGameStatusResp,
        WJCMD_CmdAppSvrAccountApplyReq,
        WJCMD_CmdAppSvrAccountApplyResp,
        WJCMD_CmdAppSvrReportLoginResultReq,
        WJCMD_CmdAppSvrReportLoginResultResp,
        WJCMD_CmdAppSvrGetBattleResultReq,
        WJCMD_CmdAppSvrGetBattleResultResp,
        WJCMD_CmdSmobaSvrLoginReq,
        WJCMD_CmdSmobaSvrLoginResp,
        WJCMD_CmdSmobaSvrProgressReportReq,
        WJCMD_CmdSmobaSvrCreateRoomReq,
        WJCMD_CmdSmobaSvrCreateRoomResp,
        WJCMD_CmdSmobaSvrJoinRoomReq,
        WJCMD_CmdSmobaSvrJoinRoomResp,
        WJCMD_CmdSmobaSvrBattleStartReq,
        WJCMD_CmdSmobaSvrBattleStartResp,
        WJCMD_CmdSmobaSvrBattleFinishReq,
        WJCMD_CmdSmobaSvrBattleFinishResp,
        WJCMD_CmdAppSmobaAccountInfoReq,
        WJCMD_CmdAppSmobaAccountInfoResp,
        WJCMD_CmdAppSmobaJoinRoomReq,
        WJCMD_CmdAppSmobaJoinRoomResp,
        WJCMD_CmdAppGmReleaseAccountReq,
        WJCMD_CmdAppGmReleaseAccountResp,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WJCMD)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WJCMD_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WJCMD_IsValidValue(int32_t value__) {
  switch (value__) {
    case WJCMD_CmdUnknow:
    case WJCMD_CmdAppSvrGetGameStatusReq:
    case WJCMD_CmdAppSvrGetGameStatusResp:
    case WJCMD_CmdAppSvrAccountApplyReq:
    case WJCMD_CmdAppSvrAccountApplyResp:
    case WJCMD_CmdAppSvrReportLoginResultReq:
    case WJCMD_CmdAppSvrReportLoginResultResp:
    case WJCMD_CmdAppSvrGetBattleResultReq:
    case WJCMD_CmdAppSvrGetBattleResultResp:
    case WJCMD_CmdSmobaSvrLoginReq:
    case WJCMD_CmdSmobaSvrLoginResp:
    case WJCMD_CmdSmobaSvrProgressReportReq:
    case WJCMD_CmdSmobaSvrCreateRoomReq:
    case WJCMD_CmdSmobaSvrCreateRoomResp:
    case WJCMD_CmdSmobaSvrJoinRoomReq:
    case WJCMD_CmdSmobaSvrJoinRoomResp:
    case WJCMD_CmdSmobaSvrBattleStartReq:
    case WJCMD_CmdSmobaSvrBattleStartResp:
    case WJCMD_CmdSmobaSvrBattleFinishReq:
    case WJCMD_CmdSmobaSvrBattleFinishResp:
    case WJCMD_CmdAppSmobaAccountInfoReq:
    case WJCMD_CmdAppSmobaAccountInfoResp:
    case WJCMD_CmdAppSmobaJoinRoomReq:
    case WJCMD_CmdAppSmobaJoinRoomResp:
    case WJCMD_CmdAppGmReleaseAccountReq:
    case WJCMD_CmdAppGmReleaseAccountResp:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum WJRetCode

GPBEnumDescriptor *WJRetCode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "RcOk\000RcAccountInfoInvail\000RcZoneInfoInvai"
        "l\000RcHeroidInvail\000RcRoomTypeInvail\000";
    static const int32_t values[] = {
        WJRetCode_RcOk,
        WJRetCode_RcAccountInfoInvail,
        WJRetCode_RcZoneInfoInvail,
        WJRetCode_RcHeroidInvail,
        WJRetCode_RcRoomTypeInvail,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WJRetCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WJRetCode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WJRetCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case WJRetCode_RcOk:
    case WJRetCode_RcAccountInfoInvail:
    case WJRetCode_RcZoneInfoInvail:
    case WJRetCode_RcHeroidInvail:
    case WJRetCode_RcRoomTypeInvail:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum WJGameStatus

GPBEnumDescriptor *WJGameStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "GameStatusUnknown\000GameStatusInit\000GameSta"
        "tusInLobby\000GameStatusInRoom\000GameStatusSe"
        "lectingHero\000GameStatusGaming\000";
    static const int32_t values[] = {
        WJGameStatus_GameStatusUnknown,
        WJGameStatus_GameStatusInit,
        WJGameStatus_GameStatusInLobby,
        WJGameStatus_GameStatusInRoom,
        WJGameStatus_GameStatusSelectingHero,
        WJGameStatus_GameStatusGaming,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WJGameStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WJGameStatus_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WJGameStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case WJGameStatus_GameStatusUnknown:
    case WJGameStatus_GameStatusInit:
    case WJGameStatus_GameStatusInLobby:
    case WJGameStatus_GameStatusInRoom:
    case WJGameStatus_GameStatusSelectingHero:
    case WJGameStatus_GameStatusGaming:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum WJRoomType

GPBEnumDescriptor *WJRoomType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "RoomTypeUnknow\000RoomType5V5WzxgCommon\000Roo"
        "mType5V5WzxgConcscript\000RoomType5V5Ffa\000Ro"
        "omType3V3\000RoomType1V1\000";
    static const int32_t values[] = {
        WJRoomType_RoomTypeUnknow,
        WJRoomType_RoomType5V5WzxgCommon,
        WJRoomType_RoomType5V5WzxgConcscript,
        WJRoomType_RoomType5V5Ffa,
        WJRoomType_RoomType3V3,
        WJRoomType_RoomType1V1,
    };
    static const char *extraTextFormatInfo = "\005\001d\344\203\344\346\000\002d\344\203\344\352\000\003d\344\203\343\000\004d\344\203\000\005d\344\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WJRoomType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WJRoomType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WJRoomType_IsValidValue(int32_t value__) {
  switch (value__) {
    case WJRoomType_RoomTypeUnknow:
    case WJRoomType_RoomType5V5WzxgCommon:
    case WJRoomType_RoomType5V5WzxgConcscript:
    case WJRoomType_RoomType5V5Ffa:
    case WJRoomType_RoomType3V3:
    case WJRoomType_RoomType1V1:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum WJCampSider

GPBEnumDescriptor *WJCampSider_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CampSiderUnknow\000CampSiderBlue\000CampSiderR"
        "ed\000";
    static const int32_t values[] = {
        WJCampSider_CampSiderUnknow,
        WJCampSider_CampSiderBlue,
        WJCampSider_CampSiderRed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WJCampSider)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WJCampSider_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WJCampSider_IsValidValue(int32_t value__) {
  switch (value__) {
    case WJCampSider_CampSiderUnknow:
    case WJCampSider_CampSiderBlue:
    case WJCampSider_CampSiderRed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - WJAccountInfo

@implementation WJAccountInfo

@dynamic platformType;
@dynamic openid;
@dynamic accessToken;
@dynamic payToken;
@dynamic launchFrom;
@dynamic account;

typedef struct WJAccountInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *platformType;
  NSString *openid;
  NSString *accessToken;
  NSString *payToken;
  NSString *launchFrom;
  NSString *account;
} WJAccountInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "platformType",
        .dataTypeSpecific.className = NULL,
        .number = WJAccountInfo_FieldNumber_PlatformType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJAccountInfo__storage_, platformType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openid",
        .dataTypeSpecific.className = NULL,
        .number = WJAccountInfo_FieldNumber_Openid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WJAccountInfo__storage_, openid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessToken",
        .dataTypeSpecific.className = NULL,
        .number = WJAccountInfo_FieldNumber_AccessToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WJAccountInfo__storage_, accessToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payToken",
        .dataTypeSpecific.className = NULL,
        .number = WJAccountInfo_FieldNumber_PayToken,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WJAccountInfo__storage_, payToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "launchFrom",
        .dataTypeSpecific.className = NULL,
        .number = WJAccountInfo_FieldNumber_LaunchFrom,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WJAccountInfo__storage_, launchFrom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "account",
        .dataTypeSpecific.className = NULL,
        .number = WJAccountInfo_FieldNumber_Account,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WJAccountInfo__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJAccountInfo class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJAccountInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\014\000\003\013\000\004\010\000\005\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJZoneInfo

@implementation WJZoneInfo

@dynamic zoneId;
@dynamic zoneName;

typedef struct WJZoneInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t zoneId;
  NSString *zoneName;
} WJZoneInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "zoneId",
        .dataTypeSpecific.className = NULL,
        .number = WJZoneInfo_FieldNumber_ZoneId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJZoneInfo__storage_, zoneId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "zoneName",
        .dataTypeSpecific.className = NULL,
        .number = WJZoneInfo_FieldNumber_ZoneName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WJZoneInfo__storage_, zoneName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJZoneInfo class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJZoneInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJRoomInfo

@implementation WJRoomInfo

@dynamic roomId;

typedef struct WJRoomInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomId;
} WJRoomInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = WJRoomInfo_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJRoomInfo__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJRoomInfo class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJRoomInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJPlayerInfo

@implementation WJPlayerInfo

@dynamic playerUid;
@dynamic playerName;
@dynamic playerLevel;

typedef struct WJPlayerInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  uint64_t playerUid;
  uint64_t playerLevel;
} WJPlayerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerUid",
        .dataTypeSpecific.className = NULL,
        .number = WJPlayerInfo_FieldNumber_PlayerUid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJPlayerInfo__storage_, playerUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = WJPlayerInfo_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WJPlayerInfo__storage_, playerName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerLevel",
        .dataTypeSpecific.className = NULL,
        .number = WJPlayerInfo_FieldNumber_PlayerLevel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WJPlayerInfo__storage_, playerLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJPlayerInfo class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJPlayerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\n\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJBattleDetailData

@implementation WJBattleDetailData

@dynamic score;
@dynamic totalCoin;
@dynamic killSoldier;
@dynamic killMonster;
@dynamic kill;
@dynamic dead;
@dynamic assist;
@dynamic doubleKillNum;
@dynamic soulLevel;
@dynamic equipIdsArray, equipIdsArray_Count;

typedef struct WJBattleDetailData__storage_ {
  uint32_t _has_storage_[1];
  uint32_t score;
  uint32_t totalCoin;
  uint32_t killSoldier;
  uint32_t killMonster;
  uint32_t kill;
  uint32_t dead;
  uint32_t assist;
  uint32_t doubleKillNum;
  uint32_t soulLevel;
  GPBUInt32Array *equipIdsArray;
} WJBattleDetailData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = WJBattleDetailData_FieldNumber_Score,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJBattleDetailData__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalCoin",
        .dataTypeSpecific.className = NULL,
        .number = WJBattleDetailData_FieldNumber_TotalCoin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WJBattleDetailData__storage_, totalCoin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "killSoldier",
        .dataTypeSpecific.className = NULL,
        .number = WJBattleDetailData_FieldNumber_KillSoldier,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WJBattleDetailData__storage_, killSoldier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "killMonster",
        .dataTypeSpecific.className = NULL,
        .number = WJBattleDetailData_FieldNumber_KillMonster,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WJBattleDetailData__storage_, killMonster),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "kill",
        .dataTypeSpecific.className = NULL,
        .number = WJBattleDetailData_FieldNumber_Kill,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WJBattleDetailData__storage_, kill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dead",
        .dataTypeSpecific.className = NULL,
        .number = WJBattleDetailData_FieldNumber_Dead,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WJBattleDetailData__storage_, dead),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "assist",
        .dataTypeSpecific.className = NULL,
        .number = WJBattleDetailData_FieldNumber_Assist,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(WJBattleDetailData__storage_, assist),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "doubleKillNum",
        .dataTypeSpecific.className = NULL,
        .number = WJBattleDetailData_FieldNumber_DoubleKillNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(WJBattleDetailData__storage_, doubleKillNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "soulLevel",
        .dataTypeSpecific.className = NULL,
        .number = WJBattleDetailData_FieldNumber_SoulLevel,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(WJBattleDetailData__storage_, soulLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "equipIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = WJBattleDetailData_FieldNumber_EquipIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WJBattleDetailData__storage_, equipIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJBattleDetailData class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJBattleDetailData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\002\t\000\003\013\000\004\013\000\010\r\000\t\t\000\n\000equipIds\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJBattlePlayerData

@implementation WJBattlePlayerData

@dynamic hasPlayerInfo, playerInfo;
@dynamic campSider;
@dynamic heroSkin;
@dynamic heroName;
@dynamic hasBattleDetailData, battleDetailData;

typedef struct WJBattlePlayerData__storage_ {
  uint32_t _has_storage_[1];
  WJCampSider campSider;
  WJPlayerInfo *playerInfo;
  NSString *heroSkin;
  NSString *heroName;
  WJBattleDetailData *battleDetailData;
} WJBattlePlayerData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(WJPlayerInfo),
        .number = WJBattlePlayerData_FieldNumber_PlayerInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJBattlePlayerData__storage_, playerInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "campSider",
        .dataTypeSpecific.enumDescFunc = WJCampSider_EnumDescriptor,
        .number = WJBattlePlayerData_FieldNumber_CampSider,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WJBattlePlayerData__storage_, campSider),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "heroSkin",
        .dataTypeSpecific.className = NULL,
        .number = WJBattlePlayerData_FieldNumber_HeroSkin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WJBattlePlayerData__storage_, heroSkin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "heroName",
        .dataTypeSpecific.className = NULL,
        .number = WJBattlePlayerData_FieldNumber_HeroName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WJBattlePlayerData__storage_, heroName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "battleDetailData",
        .dataTypeSpecific.className = GPBStringifySymbol(WJBattleDetailData),
        .number = WJBattlePlayerData_FieldNumber_BattleDetailData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WJBattlePlayerData__storage_, battleDetailData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJBattlePlayerData class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJBattlePlayerData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\n\000\003\t\000\004\010\000\005\010\000\006\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WJBattlePlayerData_CampSider_RawValue(WJBattlePlayerData *message) {
  GPBDescriptor *descriptor = [WJBattlePlayerData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJBattlePlayerData_FieldNumber_CampSider];
  return GPBGetMessageInt32Field(message, field);
}

void SetWJBattlePlayerData_CampSider_RawValue(WJBattlePlayerData *message, int32_t value) {
  GPBDescriptor *descriptor = [WJBattlePlayerData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJBattlePlayerData_FieldNumber_CampSider];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - WJAccountInfoReq

@implementation WJAccountInfoReq


typedef struct WJAccountInfoReq__storage_ {
  uint32_t _has_storage_[1];
} WJAccountInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJAccountInfoReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WJAccountInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJAccountInfoResp

@implementation WJAccountInfoResp

@dynamic hasAccountInfo, accountInfo;

typedef struct WJAccountInfoResp__storage_ {
  uint32_t _has_storage_[1];
  WJAccountInfo *accountInfo;
} WJAccountInfoResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(WJAccountInfo),
        .number = WJAccountInfoResp_FieldNumber_AccountInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJAccountInfoResp__storage_, accountInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJAccountInfoResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJAccountInfoResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJJoinRoomSBReq

@implementation WJJoinRoomSBReq

@dynamic roomId;

typedef struct WJJoinRoomSBReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomId;
} WJJoinRoomSBReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = WJJoinRoomSBReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJJoinRoomSBReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJJoinRoomSBReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJJoinRoomSBReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJJoinRoomSBResp

@implementation WJJoinRoomSBResp


typedef struct WJJoinRoomSBResp__storage_ {
  uint32_t _has_storage_[1];
} WJJoinRoomSBResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJJoinRoomSBResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WJJoinRoomSBResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJGetGameStatusReq

@implementation WJGetGameStatusReq


typedef struct WJGetGameStatusReq__storage_ {
  uint32_t _has_storage_[1];
} WJGetGameStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJGetGameStatusReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WJGetGameStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJGetGameStatusResp

@implementation WJGetGameStatusResp

@dynamic gameStatus;

typedef struct WJGetGameStatusResp__storage_ {
  uint32_t _has_storage_[1];
  WJGameStatus gameStatus;
} WJGetGameStatusResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gameStatus",
        .dataTypeSpecific.enumDescFunc = WJGameStatus_EnumDescriptor,
        .number = WJGetGameStatusResp_FieldNumber_GameStatus,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJGetGameStatusResp__storage_, gameStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJGetGameStatusResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJGetGameStatusResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WJGetGameStatusResp_GameStatus_RawValue(WJGetGameStatusResp *message) {
  GPBDescriptor *descriptor = [WJGetGameStatusResp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJGetGameStatusResp_FieldNumber_GameStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetWJGetGameStatusResp_GameStatus_RawValue(WJGetGameStatusResp *message, int32_t value) {
  GPBDescriptor *descriptor = [WJGetGameStatusResp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJGetGameStatusResp_FieldNumber_GameStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - WJApplyAccountReq

@implementation WJApplyAccountReq


typedef struct WJApplyAccountReq__storage_ {
  uint32_t _has_storage_[1];
} WJApplyAccountReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJApplyAccountReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WJApplyAccountReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJApplyAccountResp

@implementation WJApplyAccountResp

@dynamic account;
@dynamic password;

typedef struct WJApplyAccountResp__storage_ {
  uint32_t _has_storage_[1];
  NSString *account;
  NSString *password;
} WJApplyAccountResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = NULL,
        .number = WJApplyAccountResp_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJApplyAccountResp__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = WJApplyAccountResp_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WJApplyAccountResp__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJApplyAccountResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJApplyAccountResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJReportLoginResultReq

@implementation WJReportLoginResultReq

@dynamic account;
@dynamic loginSucc;

typedef struct WJReportLoginResultReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t loginSucc;
  NSString *account;
} WJReportLoginResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = NULL,
        .number = WJReportLoginResultReq_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJReportLoginResultReq__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "loginSucc",
        .dataTypeSpecific.className = NULL,
        .number = WJReportLoginResultReq_FieldNumber_LoginSucc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WJReportLoginResultReq__storage_, loginSucc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJReportLoginResultReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJReportLoginResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJReportLoginResultResp

@implementation WJReportLoginResultResp


typedef struct WJReportLoginResultResp__storage_ {
  uint32_t _has_storage_[1];
} WJReportLoginResultResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJReportLoginResultResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WJReportLoginResultResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJGetBattleResultReq

@implementation WJGetBattleResultReq

@dynamic battleId;

typedef struct WJGetBattleResultReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *battleId;
} WJGetBattleResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "battleId",
        .dataTypeSpecific.className = NULL,
        .number = WJGetBattleResultReq_FieldNumber_BattleId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJGetBattleResultReq__storage_, battleId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJGetBattleResultReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJGetBattleResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJGetBattleResultResp

@implementation WJGetBattleResultResp

@dynamic campSiderWin;
@dynamic battlePlayerDataArray, battlePlayerDataArray_Count;

typedef struct WJGetBattleResultResp__storage_ {
  uint32_t _has_storage_[1];
  WJCampSider campSiderWin;
  NSMutableArray *battlePlayerDataArray;
} WJGetBattleResultResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "campSiderWin",
        .dataTypeSpecific.enumDescFunc = WJCampSider_EnumDescriptor,
        .number = WJGetBattleResultResp_FieldNumber_CampSiderWin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJGetBattleResultResp__storage_, campSiderWin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "battlePlayerDataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(WJBattlePlayerData),
        .number = WJGetBattleResultResp_FieldNumber_BattlePlayerDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WJGetBattleResultResp__storage_, battlePlayerDataArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJGetBattleResultResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJGetBattleResultResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\014\000\002\000battlePlayerData\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WJGetBattleResultResp_CampSiderWin_RawValue(WJGetBattleResultResp *message) {
  GPBDescriptor *descriptor = [WJGetBattleResultResp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJGetBattleResultResp_FieldNumber_CampSiderWin];
  return GPBGetMessageInt32Field(message, field);
}

void SetWJGetBattleResultResp_CampSiderWin_RawValue(WJGetBattleResultResp *message, int32_t value) {
  GPBDescriptor *descriptor = [WJGetBattleResultResp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJGetBattleResultResp_FieldNumber_CampSiderWin];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - WJLoginReq

@implementation WJLoginReq

@dynamic account;

typedef struct WJLoginReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *account;
} WJLoginReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = NULL,
        .number = WJLoginReq_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJLoginReq__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJLoginReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJLoginReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJLoginResp

@implementation WJLoginResp

@dynamic hasIosZoneInfo, iosZoneInfo;
@dynamic hasAndroidZoneInfo, androidZoneInfo;

typedef struct WJLoginResp__storage_ {
  uint32_t _has_storage_[1];
  WJZoneInfo *iosZoneInfo;
  WJZoneInfo *androidZoneInfo;
} WJLoginResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iosZoneInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(WJZoneInfo),
        .number = WJLoginResp_FieldNumber_IosZoneInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJLoginResp__storage_, iosZoneInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "androidZoneInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(WJZoneInfo),
        .number = WJLoginResp_FieldNumber_AndroidZoneInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WJLoginResp__storage_, androidZoneInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJLoginResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJLoginResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJProgressResportReq

@implementation WJProgressResportReq

@dynamic hasPlayerInfo, playerInfo;
@dynamic gameStatus;

typedef struct WJProgressResportReq__storage_ {
  uint32_t _has_storage_[1];
  WJGameStatus gameStatus;
  WJPlayerInfo *playerInfo;
} WJProgressResportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(WJPlayerInfo),
        .number = WJProgressResportReq_FieldNumber_PlayerInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJProgressResportReq__storage_, playerInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gameStatus",
        .dataTypeSpecific.enumDescFunc = WJGameStatus_EnumDescriptor,
        .number = WJProgressResportReq_FieldNumber_GameStatus,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WJProgressResportReq__storage_, gameStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJProgressResportReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJProgressResportReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WJProgressResportReq_GameStatus_RawValue(WJProgressResportReq *message) {
  GPBDescriptor *descriptor = [WJProgressResportReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJProgressResportReq_FieldNumber_GameStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetWJProgressResportReq_GameStatus_RawValue(WJProgressResportReq *message, int32_t value) {
  GPBDescriptor *descriptor = [WJProgressResportReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJProgressResportReq_FieldNumber_GameStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - WJCreateRoomReq

@implementation WJCreateRoomReq

@dynamic roomType;

typedef struct WJCreateRoomReq__storage_ {
  uint32_t _has_storage_[1];
  WJRoomType roomType;
} WJCreateRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomType",
        .dataTypeSpecific.enumDescFunc = WJRoomType_EnumDescriptor,
        .number = WJCreateRoomReq_FieldNumber_RoomType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJCreateRoomReq__storage_, roomType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJCreateRoomReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJCreateRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WJCreateRoomReq_RoomType_RawValue(WJCreateRoomReq *message) {
  GPBDescriptor *descriptor = [WJCreateRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJCreateRoomReq_FieldNumber_RoomType];
  return GPBGetMessageInt32Field(message, field);
}

void SetWJCreateRoomReq_RoomType_RawValue(WJCreateRoomReq *message, int32_t value) {
  GPBDescriptor *descriptor = [WJCreateRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJCreateRoomReq_FieldNumber_RoomType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - WJCreateRoomResp

@implementation WJCreateRoomResp

@dynamic hasRoomInfo, roomInfo;

typedef struct WJCreateRoomResp__storage_ {
  uint32_t _has_storage_[1];
  WJRoomInfo *roomInfo;
} WJCreateRoomResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(WJRoomInfo),
        .number = WJCreateRoomResp_FieldNumber_RoomInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJCreateRoomResp__storage_, roomInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJCreateRoomResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJCreateRoomResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJJoinRoomReq

@implementation WJJoinRoomReq

@dynamic roomId;

typedef struct WJJoinRoomReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomId;
} WJJoinRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = WJJoinRoomReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJJoinRoomReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJJoinRoomReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJJoinRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJJoinRoomResp

@implementation WJJoinRoomResp


typedef struct WJJoinRoomResp__storage_ {
  uint32_t _has_storage_[1];
} WJJoinRoomResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJJoinRoomResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WJJoinRoomResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJBattleStartReq

@implementation WJBattleStartReq


typedef struct WJBattleStartReq__storage_ {
  uint32_t _has_storage_[1];
} WJBattleStartReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJBattleStartReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WJBattleStartReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJBattleStartResp

@implementation WJBattleStartResp


typedef struct WJBattleStartResp__storage_ {
  uint32_t _has_storage_[1];
} WJBattleStartResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJBattleStartResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WJBattleStartResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJBattleFinishReq

@implementation WJBattleFinishReq

@dynamic campSiderWin;
@dynamic battlePlayerDataArray, battlePlayerDataArray_Count;

typedef struct WJBattleFinishReq__storage_ {
  uint32_t _has_storage_[1];
  WJCampSider campSiderWin;
  NSMutableArray *battlePlayerDataArray;
} WJBattleFinishReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "campSiderWin",
        .dataTypeSpecific.enumDescFunc = WJCampSider_EnumDescriptor,
        .number = WJBattleFinishReq_FieldNumber_CampSiderWin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WJBattleFinishReq__storage_, campSiderWin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "battlePlayerDataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(WJBattlePlayerData),
        .number = WJBattleFinishReq_FieldNumber_BattlePlayerDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WJBattleFinishReq__storage_, battlePlayerDataArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJBattleFinishReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WJBattleFinishReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\014\000\002\000battlePlayerData\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WJBattleFinishReq_CampSiderWin_RawValue(WJBattleFinishReq *message) {
  GPBDescriptor *descriptor = [WJBattleFinishReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJBattleFinishReq_FieldNumber_CampSiderWin];
  return GPBGetMessageInt32Field(message, field);
}

void SetWJBattleFinishReq_CampSiderWin_RawValue(WJBattleFinishReq *message, int32_t value) {
  GPBDescriptor *descriptor = [WJBattleFinishReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WJBattleFinishReq_FieldNumber_CampSiderWin];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - WJBattleFinishResp

@implementation WJBattleFinishResp


typedef struct WJBattleFinishResp__storage_ {
  uint32_t _has_storage_[1];
} WJBattleFinishResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJBattleFinishResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WJBattleFinishResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJGMReleaseAccountReq

@implementation WJGMReleaseAccountReq


typedef struct WJGMReleaseAccountReq__storage_ {
  uint32_t _has_storage_[1];
} WJGMReleaseAccountReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJGMReleaseAccountReq class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WJGMReleaseAccountReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WJGMReleaseAccountResp

@implementation WJGMReleaseAccountResp


typedef struct WJGMReleaseAccountResp__storage_ {
  uint32_t _has_storage_[1];
} WJGMReleaseAccountResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WJGMReleaseAccountResp class]
                                     rootClass:[WJSmobaDataRoot class]
                                          file:WJSmobaDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WJGMReleaseAccountResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
